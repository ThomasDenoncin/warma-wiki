---
import { factions } from '../../lib/const.mjs'
import Mustache from 'mustache'
import * as fs from 'fs'

const armiesList = await Astro.glob('../../pages/*/*/index.astro')
const armiesTitles = armiesList.map(({title, description, tags}) => ({title, description, tags}))

const factionsString = JSON.stringify(factions)
const armiesListString = JSON.stringify(armiesTitles)

async function handleSubmit(e) {
    console.log('handleSubmit')
    const formData = new FormData(e.target)
    console.log('api data', formData)
    const template = fs.readFileSync('../../templates/leader.mustache')
    const output = Mustache.render(template, formData, [ '<%', '%>' ])
    fs.writeFileSync('../test/test.mdx', output)
    console.log('response data', formData)
}
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Add unit</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- <link rel="stylesheet" type="text/css" media="screen" href="main.css"> -->
    <link rel="stylesheet" type="text/css" media="screen" href="/css/unit.css">
  </head>
  <body>
    <header class="site-header">Warma-wiki</header>
    <main>
        <header>Add unit</header>
        <div class="form-wrapper">
            <form @submit.prevent={handleSubmit} x-data=`{
                faction: '',
                army: '',
                type: '',
                isLeader() {
                    return this.type === 'warlock' || this.type === 'warcaster'
                },
                isCohort() {
                    return this.type === 'warjack' || this.type === 'warbeast' || this.type === 'monstruosity' || this.type === 'horror'
                },
                get keywords() {
                    const factionSpacer = this.faction !== '' ? ' ' : ''
                    const armySpacer = this.army + this.army !== '' ? ' ' : ''
                    return this.faction + factionSpacer + this.army + armySpacer + this.type
                }
            }` method="GET">
                <div class="form-section">
                    <fieldset>
                        <legend>faction</legend>
                        <label for="faction">Faction</label>
                        <select 
                            name="faction"
                            x-data=`{factionList: ${factionsString}}`
                            x-model="faction"
                        >
                            <option value="">-</option>
                            <template x-for="faction in factionList">
                                <option 
                                    x-text="faction"
                                    x-bind:value="faction"
                                ></option>
                            </template> 
                        </select>
                        <label 
                            for="army"
                            x-show="faction"
                        >Army</label>
                        <select 
                            name="army"
                            x-show="faction"
                            x-data=`{
                                armyList: ${armiesListString},
                                factionArmyList: []
                            }`
                            x-effect=`
                                factionArmyList = armyList.filter(function(army) {
                                    return army.tags.includes(faction.toLowerCase())
                                })
                            `
                            x-model="army"
                        >
                            <template x-for="army in factionArmyList">
                                <option 
                                    x-text="army.title"
                                    x-bind:value="army.description"
                                ></option>
                            </template> 
                        </select>
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit type</legend>
                        <input x-model="type" type="radio" name="type" id="warcaster" value="warcaster">
                        <label for="caster">Warcaster</label>
                        <input x-model="type" type="radio" name="type" id="warlock" value="warlock">
                        <label for="lock">Warlock</label>
                        <input x-model="type" type="radio" name="type" id="warjack" value="warjack">
                        <label for="jack">Warjack</label>
                        <input x-model="type" type="radio" name="type" id="warbeast" value="warbeast">
                        <label for="beast">Warbeast</label>
                        <input x-show="army === 'Dark Operation'" x-model="type" type="radio" name="type" id="monstruosity" value="monstruosity">
                        <label x-show="army === 'Dark Operation'" for="monstruosity">Monstruosity</label>
                        <input x-show="faction === 'Infernals'" x-model="type" type="radio" name="type" id="horror" value="horror">
                        <label x-show="faction === 'Infernals'" for="horror">Horror</label>
                        <input x-model="type" type="radio" name="type" id="solo" value="solo">
                        <label for="solo">Solo</label>
                        <input x-model="type" type="radio" name="type" id="unit" value="unit">
                        <label for="unit">Unit</label>
                        <input x-model="type" type="radio" name="type" id="attachment" value="attachment">
                        <label for="attach">Attachement</label>
                    </fieldset>
                </div>
                <div
                    class="form-section"
                    x-data="{fa: ''}"
                >
                    <fieldset>
                        <legend>unit infos</legend>
                        <label for="title">Title</label>
                        <input type="text" name="title" placeholder="Unit title">
                        <label for="name">Name</label>
                        <input type="text" name="name" placeholder="Unit name">
                        <label for="keywords">Keywords</label>
                        <input x-model="keywords" type="text" name="keywords" placeholder="Faction Army keywords">
                        <label for="fa">Field Allowance</label>
                        <input 
                            type="text" 
                            name="fa"
                            placeholder="Field Allowance"
                            x-text="fa"
                            x-model="fa"
                            x-effect=`
                                fa = type && isLeader() ? 'C' : ''
                            `
                        >
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit profile</legend>
                        <label for="spd">SPD</label>
                        <input type="number" pattern="\d*" name="spd" placeholder="Speed">
                        <label x-show="isLeader()" for="aat">AAT</label>
                        <input x-show="isLeader()" type="number" pattern="\d*" name="aat" placeholder="Arcane Attack">
                        <label for="mat">MAT</label>
                        <input type="number" pattern="\d*" name="mat" placeholder="Melee Attack">
                        <label for="rat">RAT</label>
                        <input type="number" pattern="\d*" name="rat" placeholder="Range Attack">
                        <label for="def">DEF</label>
                        <input type="number" pattern="\d*" name="def" placeholder="Defence">
                        <label for="arm">ARM</label>
                        <input type="number" pattern="\d*" name="arm" placeholder="Armor">
                        <label x-show="isLeader()" for="arc">ARC</label>
                        <input x-show="isLeader()" type="number" pattern="\d*" name="arc" placeholder="Arcane value">
                        <label x-show="isLeader()" for="ctrl">CTRL</label>
                        <input x-show="isLeader()" type="number" pattern="\d*" name="ctrl" placeholder="Controle Range">
                        <label for="hp">HP</label>
                        <input type="number" pattern="\d*" name="hp" placeholder="Health Points">
                        <label for="base">Base</label>
                        <input type="number" pattern="\d*" name="base" placeholder="Base size">
                        <label for="adv">Advantages</label>
                        <select name="adv"></select>
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit abilities</legend>
                        <label for="abil">Abilities</label>
                        <select name="abil"></select>
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit weapons</legend>
                        <label for="weapons">Weapons</label>
                        <select name="weapons"></select>
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit feat</legend>
                        <label for="feat">Feat</label>
                        <select name="feat"></select>
                    </fieldset>
                </div>
                <div class="form-section">
                    <fieldset>
                        <legend>unit spells</legend>
                        <label for="spells">Spells</label>
                        <select name="spells"></select>
                    </fieldset>
                </div>
                <select id="multSelect">
                    <option value="te_1" data-search="arsenal">Arsenal</option>
                    <option value="te_3" data-search="Tottenham Hotspur Spurs">Spurs</option>
                    <option value="te_3" data-search="Manchester City">Man City</option>
                </select>
                <div class="w-full" x-data="alpineMuliSelect({selected:['te_11', 'te_12'], elementId:'multSelect'})"></div>
                <button class="w-full p-10" type="submit">Ajouter</button>
            </form>
        </div>
    </main>
    <script>
        document.addEventListener("alpine:init", () => {
        Alpine.data("alpineMuliSelect", (obj) => ({
            elementId: obj.elementId,
            options: [],
            selected: obj.selected,
            selectedElms: [],
            show: false,
            search: '',
            open() {
                this.show = true
            },
            close() {
                this.show = false
            },
            toggle() {
                this.show = !this.show
            },
            isOpen() {
                return this.show === true
            },
            
            // Initializing component 
            init() {
                const options = document.getElementById(this.elementId).options;
                for (let i = 0; i < options.length; i++) {

                    this.options.push({
                        value:  options[i].value,
                        text:   options[i].innerText,
                        search: options[i].dataset.search,
                        selected: Object.values(this.selected).includes(options[i].value)
                    });

                    if (this.options[i].selected) {
                        this.selectedElms.push(this.options[i])
                    }
                }

                // searching for the given value
                this.$watch("search", (e => {
                    this.options = []
                    const options = document.getElementById(this.elementId).options;
                    Object.values(options).filter((el) => {
                        var reg = new RegExp(this.search, 'gi');
                        return el.dataset.search.match(reg)
                    }).forEach((el) => {
                        let newel = {
                            value: el.value,
                            text: el.innerText,
                            search: el.dataset.search,
                            selected: Object.values(this.selected).includes(el.value)
                        }
                        this.options.push(newel);
                    })
                }));
            },
            // clear search field
            clear() {
                this.search = ''
            },
            // deselect selected options
            deselect() {
                setTimeout(() => {
                    this.selected = []
                    this.selectedElms = []
                    Object.keys(this.options).forEach((key) => {
                        this.options[key].selected = false;
                    })
                }, 100)
            },
            // select given option
            select(index, event) {
                if (!this.options[index].selected) {
                    this.options[index].selected = true;
                    this.options[index].element = event.target;
                    this.selected.push(this.options[index].value);
                    this.selectedElms.push(this.options[index]);

                } else {
                    this.selected.splice(this.selected.lastIndexOf(index), 1);
                    this.options[index].selected = false
                    Object.keys(this.selectedElms).forEach((key) => {
                        if (this.selectedElms[key].value == this.options[index].value) {
                            setTimeout(() => {
                                this.selectedElms.splice(key, 1)
                            }, 100)
                        }
                    })
                }
            },
            // remove from selected option
            remove(index, option) {
                this.selectedElms.splice(index, 1);
                Object.keys(this.options).forEach((key) => {
                    if (this.options[key].value == option.value) {
                        this.options[key].selected = false;
                        Object.keys(this.selected).forEach((skey) => {
                            if (this.selected[skey] == option.value) {
                                this.selected.splice(skey, 1);
                            }
                        })
                    }
                })
            },
            // filter out selected elements
            selectedElements() {
                return this.options.filter(op => op.selected === true)
            },
            // get selected values
            selectedValues() {
                return this.options.filter(op => op.selected === true).map(el => el.value)
            }
        }));
        });
    </script>
  </body>
</html>

<style>
    header {
        padding: 30px;
        background-color: black;
        color: whitesmoke;
        font-size: 2em;
        font-weight: bolder;
        text-align: center;
    }

    nav {
        text-align: center;
    }

    article,
	.breadcrumbs {
        max-width: 800px;
        margin: 0 auto;
    }
	article {
		padding: 20px;
	}
	.breadcrumbs {
		padding: 20px 20px 0;
	}
</style>